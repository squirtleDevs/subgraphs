"""
Color of NFT from least rare to rarest
"""
enum Color {
  WHITE #tier/class - 1
  YELLOW #tier/class - 2
  BLUE #tier/class - 3
  RED #tier/class - 4
  BLACK #tier/class - 4
}

"""
Class of NFT from least rare to rarest that corresponds to Color
"""
enum Class {
  ONE
  TWO
  THREE
  FOUR
}

"""
An account of users holding an NFT within merge. collection.
"""
type User @entity {
  "The holder's address of NFT in collection"
  id: ID!
  "Unique tokenID for a respective NFT"
  tokenID: BigInt!
  "Details about NFTs being held by this User"
  massNFTs: [NFTs!]! @derivedFrom(field: "owner") #pak: allows one to query info about NFTs belonging to this user
  "Whether this User can carry more than one mass NFT"
  whitelist: Boolean! #pak: These are central marketplaces typically like Nifty Gateway
}

"""
Individual NFTs within this collection.
"""
type NFTs @entity {
  "Unique tokenID"
  id: ID!
  "Last sale ID showing number of times this token has been sold"
  sale: [Sales!]! @derivedFrom(field: "tokenID")
  "Whether the NFT has been merged, and therefore deleted"
  merged: Boolean! #pak
  "Current owner unless merged where it would be address(0)"
  owner: User!
  "Size of mass for a specific NFT"
  massSize: BigInt! #pak
  "Color of mass NFT; BLACK is Alpha"
  color: Color! #pak: class in smart contract specifies color where decodeClass(_values[tokenId]) is used in generating metadata (on-chain svg).
  "Rarity for mass NFTs; higher numbers are highest rarity"
  class: Class! #pak: in smart contracts, class is a uint
  "Amount of times this tokenID has absorbed other NFTs"
  mergeCount: BigInt! #pak
}

"""
History of sales for NFTs in collection.
"""
type Sales {
  "Concatenation of tokenID-saleNumber"
  id: ID!
  "First sale is 0 - second is 1 - etc"
  saleNumber: Int!
  "Token ID of the mass"
  tokenID: NFTs!
  "ERC-20 Token used to purchase NFT"
  saleToken: Token!
  "Price it was sold for in saleToken"
  salePrice: BigInt!
  "Sale block timestamp" # Can be converted in front end to human readable"
  timestamp: Int!
  "Seller"
  from: Bytes!
  "Buyer"
  to: Bytes!
}

"""
The NFT collection, merge., and inherent global details on it.
"""
type Collection @entity {
  "NFT external contract address"
  id: ID!
  "Name of NFT collection"
  Name: String!
  "Total Mass in beginning"
  originalMass: Int!
  "ERC token standard used in this collection"
  tokenStandard: String!
  "TokenID of alpha mass"
  alphaMass: String
  "Owner of alpha mass"
  alphaOwner: [NFTs!]! @derivedFrom(field: "tokenID")
  "Original amount of individual mergeNFTs minted"
  originalMergeNFTs: Int!
  "Current amount of individual mergeNFTs existing"
  currentMergeNFTs: Int! # this includes accounts that are in Nifty Gateway OMNIBUS
  "Number of Merges that have occurred"
  totalMerges: Int
  "Number of archaic non-merge burns"
  noMergeBurns: Int
  "Total mass in the collection"
  totalMass: Int!
  "Total tier-1 (least rare tier) WHITE NFTs"
  tier1Totals: Int
  "Total tier-2 (4th rare tier) YELLOW NFTs"
  tier2Totals: Int
  "Total tier-3 (3rd rare tier) BLUE NFTs"
  tier3Totals: Int
  "Total tier-4 (2nd rare tier) RED NFTs"
  tier4Totals: Int
  "Number of current unique addresses holding these NFTs"
  totalUniqueAddresses: Int # this does not include accuonts that are in Nifty Gateway OMNIBUS
}

"""
An asset used to purchase NFT from collection. These assets should follow ERC-20 standard.
"""
type Token @entity {
  "Token address"
  id: ID!
  "Number of decimals use for Token"
  decimals: BigInt! #typically 10^18
  "Token SYMBOL"
  symbol: String!
  "Token name"
  name: String!
}
