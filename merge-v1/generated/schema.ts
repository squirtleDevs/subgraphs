// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Hodler extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("collectionName", Value.fromString(""));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("tokenID", Value.fromBigInt(BigInt.zero()));
    this.set("massSize", Value.fromBigInt(BigInt.zero()));
    this.set("rarityPreMerge", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("rarityNow", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("isBlue", Value.fromBoolean(false));
    this.set("isYellow", Value.fromBoolean(false));
    this.set("isNormal", Value.fromBoolean(false));
    this.set("tier", Value.fromBigInt(BigInt.zero()));
    this.set("class", Value.fromBigInt(BigInt.zero()));
    this.set("mergeCount", Value.fromBigInt(BigInt.zero()));
    this.set("tokenStandard", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Hodler entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Hodler entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Hodler", id.toString(), this);
    }
  }

  static load(id: string): Hodler | null {
    return changetype<Hodler | null>(store.get("Hodler", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collectionName(): string {
    let value = this.get("collectionName");
    return value!.toString();
  }

  set collectionName(value: string) {
    this.set("collectionName", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value!.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get massSize(): BigInt {
    let value = this.get("massSize");
    return value!.toBigInt();
  }

  set massSize(value: BigInt) {
    this.set("massSize", Value.fromBigInt(value));
  }

  get rarityPreMerge(): BigDecimal {
    let value = this.get("rarityPreMerge");
    return value!.toBigDecimal();
  }

  set rarityPreMerge(value: BigDecimal) {
    this.set("rarityPreMerge", Value.fromBigDecimal(value));
  }

  get rarityNow(): BigDecimal {
    let value = this.get("rarityNow");
    return value!.toBigDecimal();
  }

  set rarityNow(value: BigDecimal) {
    this.set("rarityNow", Value.fromBigDecimal(value));
  }

  get isBlue(): boolean {
    let value = this.get("isBlue");
    return value!.toBoolean();
  }

  set isBlue(value: boolean) {
    this.set("isBlue", Value.fromBoolean(value));
  }

  get isYellow(): boolean {
    let value = this.get("isYellow");
    return value!.toBoolean();
  }

  set isYellow(value: boolean) {
    this.set("isYellow", Value.fromBoolean(value));
  }

  get isNormal(): boolean {
    let value = this.get("isNormal");
    return value!.toBoolean();
  }

  set isNormal(value: boolean) {
    this.set("isNormal", Value.fromBoolean(value));
  }

  get purchasePrice(): BigDecimal | null {
    let value = this.get("purchasePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set purchasePrice(value: BigDecimal | null) {
    if (!value) {
      this.unset("purchasePrice");
    } else {
      this.set("purchasePrice", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get purchaseDate(): BigDecimal | null {
    let value = this.get("purchaseDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set purchaseDate(value: BigDecimal | null) {
    if (!value) {
      this.unset("purchaseDate");
    } else {
      this.set("purchaseDate", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tier(): BigInt {
    let value = this.get("tier");
    return value!.toBigInt();
  }

  set tier(value: BigInt) {
    this.set("tier", Value.fromBigInt(value));
  }

  get class(): BigInt {
    let value = this.get("class");
    return value!.toBigInt();
  }

  set class(value: BigInt) {
    this.set("class", Value.fromBigInt(value));
  }

  get mergeCount(): BigInt {
    let value = this.get("mergeCount");
    return value!.toBigInt();
  }

  set mergeCount(value: BigInt) {
    this.set("mergeCount", Value.fromBigInt(value));
  }

  get tokenStandard(): string {
    let value = this.get("tokenStandard");
    return value!.toString();
  }

  set tokenStandard(value: string) {
    this.set("tokenStandard", Value.fromString(value));
  }
}

export class OriginalMasses extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OriginalMasses entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OriginalMasses entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OriginalMasses", id.toString(), this);
    }
  }

  static load(id: string): OriginalMasses | null {
    return changetype<OriginalMasses | null>(store.get("OriginalMasses", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class CurrentMasses extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CurrentMasses entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CurrentMasses entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CurrentMasses", id.toString(), this);
    }
  }

  static load(id: string): CurrentMasses | null {
    return changetype<CurrentMasses | null>(store.get("CurrentMasses", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class MassGroups extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("massSize", Value.fromBigInt(BigInt.zero()));
    this.set("subgroupSize", Value.fromBigInt(BigInt.zero()));
    this.set("ogGroupSize", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MassGroups entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MassGroups entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MassGroups", id.toString(), this);
    }
  }

  static load(id: string): MassGroups | null {
    return changetype<MassGroups | null>(store.get("MassGroups", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get massSize(): BigInt {
    let value = this.get("massSize");
    return value!.toBigInt();
  }

  set massSize(value: BigInt) {
    this.set("massSize", Value.fromBigInt(value));
  }

  get subgroupSize(): BigInt {
    let value = this.get("subgroupSize");
    return value!.toBigInt();
  }

  set subgroupSize(value: BigInt) {
    this.set("subgroupSize", Value.fromBigInt(value));
  }

  get ogGroupSize(): BigInt {
    let value = this.get("ogGroupSize");
    return value!.toBigInt();
  }

  set ogGroupSize(value: BigInt) {
    this.set("ogGroupSize", Value.fromBigInt(value));
  }
}

export class InitialTotals extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalMass", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InitialTotals entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save InitialTotals entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("InitialTotals", id.toString(), this);
    }
  }

  static load(id: string): InitialTotals | null {
    return changetype<InitialTotals | null>(store.get("InitialTotals", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalMass(): BigInt {
    let value = this.get("totalMass");
    return value!.toBigInt();
  }

  set totalMass(value: BigInt) {
    this.set("totalMass", Value.fromBigInt(value));
  }
}
