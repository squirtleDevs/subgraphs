"Can be used for marketplace construction or even just a specific visualization front-end"
type Hodler @entity {
  id: ID!
  collectionName: String!
  owner: Bytes!
  tokenID: BigInt! # uint256
  massSize: BigInt!
  rarityPreMerge: BigDecimal! #TODO: percentage of mass NFTs that are this specific mass size in the whole collection. This one is trickier bc we need the instance of total mass at that specific size right before Merging capability was activated. I think this is better in a separate entity. The front end devs can just take MassGroups entities and calculate the rarity.
  rarityNow: BigDecimal! #TODO: see above comment. Same applies.
  isBlue: Boolean!
  isYellow: Boolean!
  isNormal: Boolean! #TODO: Front end should be able to work with isBlue and isYellow to determine that it isNormal, but I'll put it in and see what DK says.
  purchasePrice: BigDecimal # original purchase ether price of NFT
  purchaseDate: BigDecimal #blockNumber converted to human time?
  tier: BigInt!
  class: BigInt!
  mergeCount: BigInt!
  tokenStandard: String!
}

"These are the original merge nfts upon nft project initialization"
type OriginalMasses @entity {
  id: ID!
  count: BigInt! #number of original separate mass nfts before "merging" was allowed and thus unique owners. From the get-go a user could not hold more than one "merge" nft cause it would just get merged into other merge nfts in that respective wallet
}

"These are the current masses after the absorption of smaller masses in trades to date"
type CurrentMasses @entity {
  id: ID!
  count: BigInt! #number of new separate mass nfts after "merging" allowed and thus unique owners
}

"Details for groups of specific mass sizes that can be used to calculate relative rarity within collection"
type MassGroups @entity {
  id: ID!
  massSize: BigInt! #size of mass in this specific subgroup
  subgroupSize: BigInt! #number of nfts with the same mass size now
  ogGroupSize: BigInt! #original number of nfts with the same mass size as your mass NFT in your wallet
}

type InitialTotals @entity {
  totalMass: BigInt! #mass total of entire collection
}
